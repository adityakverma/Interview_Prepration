
https://www.geeksforgeeks.org/overview-of-data-structures-set-3-graph-trie-segment-tree-and-suffix-tree/


Trie

Trie is an efficient data structure for searching words in dictionaries,
search complexity with Trie is linear in terms of word (or key) length to be searched.
If we store keys in binary search tree, a well balanced BST will need time proportional to M * log N, where M is maximum string length and N is number of keys in tree. Using trie, we can search the key in O(M) time. So it is much faster than BST.

Hashing also provides word search in O(n) time on average. But the advantages of Trie are there
are no collisions (like hashing) so worst case time complexity is O(n). Also, the most important
thing is Prefix Search. With Trie, we can find all words beginning with a prefix
(This is not possible with Hashing). The only problem with Tries is they require a lot of extra
space. Tries are also known as radix tree or prefix tree.

The Trie structure can be defined as follows :
struct trie_node
{
    int value; /* Used to mark leaf nodes */
    trie_node_t *children[ALPHABET_SIZE];
};


                       root
                    /   \    \
                    t   a     b
                    |   |     |
                    h   n     y
                    |   |  \  |
                    e   s  y  e
                 /  |   |
                 i  r   w
                 |  |   |
                 r  e   e
                        |
                        r

The leaf nodes are in blue.

Insert time : O(M) where M is the length of the string.
Search time : O(M) where M is the length of the string.
Space : O(ALPHABET_SIZE * M * N) where N is number of
        keys in trie, ALPHABET_SIZE is 26 if we are
        only considering upper case Latin characters.
Deletion time : O(M)

Example : The most common use of Tries is to implement dictionaries due to prefix search capability.
Tries are also well suited for implementing approximate matching algorithms, including those used
in spell checking. It is also used for searching Contact from Mobile Contact list OR Phone Directory.

========================================================

Time Complexity:

The complexity to make a trie structure is O(n*m). Here m would be the length of the longest
string (worst case complexity) which would be repeated for all the strings and hence )(n*m).


